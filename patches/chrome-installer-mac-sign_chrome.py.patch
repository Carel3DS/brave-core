diff --git a/chrome/installer/mac/sign_chrome.py b/chrome/installer/mac/sign_chrome.py
index db35e6560b8a20d72414250649dac6873fd71022..86698dca234f633c97b9d4e0d37431d0ad8a5a01 100755
--- a/chrome/installer/mac/sign_chrome.py
+++ b/chrome/installer/mac/sign_chrome.py
@@ -44,6 +44,7 @@ def create_config(config_args, development):
     from signing.chromium_config import ChromiumCodeSignConfig
     config_class = ChromiumCodeSignConfig
 
+    """
     # Then search for the internal config for Google Chrome.
     try:
         from signing.internal_config import InternalCodeSignConfig
@@ -53,6 +54,7 @@ def create_config(config_args, development):
         # internal config has to be available.
         if config_class(*config_args).product == 'Google Chrome':
             raise e
+    """
 
     if development:
 
@@ -74,6 +76,8 @@ def create_config(config_args, development):
 
         config_class = DevelopmentCodeSignConfig
 
+    from signing_helper import GetBraveSigningConfig
+    config_class = GetBraveSigningConfig(config_class, development)
     return config_class(*config_args)
 
 
@@ -87,6 +91,8 @@ def _show_tool_versions():
 def main():
     parser = argparse.ArgumentParser(
         description='Code sign and package Chrome for channel distribution.')
+    parser.add_argument(
+        '--keychain', help='The keychain to load the identity from.')
     parser.add_argument(
         '--identity',
         required=True,
@@ -154,8 +160,9 @@ def main():
                          'are required with --notarize.')
 
     config = create_config(
-        (args.identity, args.installer_identity, args.notary_user,
-         args.notary_password, args.notary_asc_provider), args.development)
+        (args.identity, args.installer_identity, args.keychain,
+         args.notary_user, args.notary_password, args.notary_asc_provider),
+         args.development)
     paths = model.Paths(args.input, args.output, None)
 
     if not os.path.exists(paths.output):
